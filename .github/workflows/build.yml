name: build

on: [push, pull_request]

jobs:
  ubuntu-20:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler:
          - pkg: g++-7
            exe: g++-7
          - pkg: g++-8
            exe: g++-8
          - pkg: clang-8 libomp-dev
            exe: clang++-8
          - pkg: clang-9 libomp-dev
            exe: clang++-9
          - pkg: clang-10 libomp-dev
            exe: clang++-10
    steps:
    - uses: actions/checkout@v3
    - name: Install compiler
      run: |
        sudo apt update
        sudo apt install -y ${{ matrix.compiler.pkg }}
    - name: Configure CMake
      env:
        CXX: ${{ matrix.compiler.exe }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build -j4
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest

  ubuntu-22:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler:
          - pkg: g++-9
            exe: g++-9
          - pkg: g++-10
            exe: g++-10
          - pkg: g++-11
            exe: g++-11
          - pkg: g++-12
            exe: g++-12
          - pkg: clang-11 libomp-11-dev
            exe: clang++-11
          - pkg: clang-12 libomp-12-dev
            exe: clang++-12
          - pkg: clang-13 libomp-13-dev
            exe: clang++-13
          - pkg: clang-14 libomp-14-dev
            exe: clang++-14
          - pkg: clang-15 libomp-15-dev
            exe: clang++-15
    steps:
    - uses: actions/checkout@v3
    - name: Install compiler
      run: |
        sudo apt update
        sudo apt install -y ${{ matrix.compiler.pkg }}
    - name: Configure CMake
      env:
        CXX: ${{ matrix.compiler.exe }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build -j4
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest

  linux-gpu:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Configure CMake
      run: |
        . /opt/intel/oneapi/setvars.sh
        cmake -B ${{github.workspace}}/build -DXPU_ENABLE_SYCL=ON -DXPU_ENABLE_CUDA=ON -DXPU_ENABLE_HIP=ON -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON
    - name: Build
      # Build your program with the given configuration
      run: |
        . /opt/intel/oneapi/setvars.sh
        cmake --build ${{github.workspace}}/build -j4
    - name: Test
      working-directory: ${{github.workspace}}/build
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest -j4 -E sycl

  cpp20:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler:
          - pkg: g++
            cc: g++
          - pkg: clang-15 libomp-15-dev
            cc: clang++-15
        cxx_std: [20]

    steps:
    - uses: actions/checkout@v3

    - name: Install compiler
      run: |
        sudo apt update
        sudo apt install -y ${{ matrix.compiler.pkg }}

    - name: Configure CMake
      env:
        CXX: ${{ matrix.compiler.cc }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_CXX_STANDARD=${{ matrix.cxx_std }} -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest

  macos-11:
    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup without OpenMP
      run: cmake -B ${{github.workspace}}/build -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest

  macos-12:
    runs-on: macOS-12

    steps:
    - uses: actions/checkout@v3

    - name: Setup
      run: cmake -B ${{github.workspace}}/build -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest
